#!/usr/bin/env python
#
# Originally by Kaitlin J. Cook (KJC) on 2014-06-02:
#
#     https://github.com/KJCook/sedov-solution
#
# A python script for plotting abundances on the nuclear chart as a function
# of time.
#
import os, sys
import matplotlib.animation
import matplotlib.pyplot as plt
import numpy as np
import tso_reader

if len(sys.argv) != 2:
    sys.stderr.write("Usage: {0} DATA_DIR\n".format(sys.argv[0]))
    sys.exit(1)
data_dir = sys.argv[1]

# set up the chart; import the A, Z, N of known nuclei
azn = np.genfromtxt("chart-azn", delimiter=" ", dtype=float)
Abig = np.array([row[0] for row in azn])
Zbig = np.array([row[1] for row in azn])
Nbig = np.array([row[2] for row in azn])

stable = np.genfromtxt("chart-stable", delimiter=" ", dtype=float)
Astable = np.array([row[0] for row in stable])
Zstable = np.array([row[1] for row in stable])
Nstable = Astable - Zstable

os.chdir(data_dir)

Znetwork = []
Nnetwork = []
with open("netwinv", "r") as f:
    num_nuclei = int(next(f))
    next(f)
    # skip the first couple liens
    for _ in zip(range(num_nuclei), f):
        pass
    while True:
        try:
            row = next(f).split()
        except StopIteration:
            break
        Znetwork.append(row[2])
        Nnetwork.append(row[3])
        next(f)
        next(f)
        next(f)

# import the data from XNet output `ev1`
data = tso_reader.read_tso("tso1")
time = data["t"]
abundance = data["y"]

# transpose the graph
color_data = np.transpose(abundance)

# make it logarithmic
color_data = color_data + 1e-33
color_data = np.log10(color_data)

# plot a set of white boxes
fig = plt.figure()
ax  = fig.add_subplot(111)
big = ax.scatter(Nbig, Zbig, c="w", marker="s", s=40)

# initialize animation
scatt = ax.scatter(Nnetwork, Znetwork, c="w", marker ="s", s=40)
ax.set_xlabel("Number of Neutrons", fontsize=12)
ax.set_ylabel("Number of Protons", fontsize=12)
ax.set_xlim(-2, 40)
ax.set_ylim(-2, 31)

def update_plot(i, data, scatt):
    scatt.set_array(data[i])
    return scatt,

ani = matplotlib.animation.FuncAnimation(
    fig,
    update_plot,
    frames=len(color_data),
    interval=1,
    fargs=(color_data,scatt)
)

cbar = plt.colorbar(scatt)

stablep = ax.scatter(Nstable, Zstable, c="k", marker="x", s=20)
cbar.set_label("Log10(Abundance)", rotation=270)

# Save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The `extra_args` ensures that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for your
# system: for more information, see:
#
#     http://matplotlib.sourceforge.net/api/animation_api.html
#
# note: doesn't seem to work on python3-matplotlib on Arch Linux
ani.save("chart.mp4", fps=70, extra_args=["-vcodec", "libx264"])
